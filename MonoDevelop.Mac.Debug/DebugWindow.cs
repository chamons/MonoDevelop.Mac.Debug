// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using AppKit;

namespace MonoDevelop.Mac.Debug
{
	public class DebugWindow : NSWindow
	{
		NSMenu menu;
		NSView view, nextKeyView, previousKeyView;

		BorderedWindow debugOverlayWindow;
		BorderedWindow debugNextOverlayWindow;
		BorderedWindow debugPreviousOverlayWindow;

		StatusWindow debugStatusWindow;

		#region Properties

		bool IsNextResponderOverlayVisible {
			get {
				return debugNextOverlayWindow.Visible;
			}
			set {
				debugNextOverlayWindow.Visible = value;
			}
		}

		bool IsPreviousResponderOverlayVisible {
			get {
				return debugPreviousOverlayWindow.Visible;
			}
			set {
				debugPreviousOverlayWindow.Visible = value;
			}
		}

		bool IsFirstResponderOverlayVisible {
			get {
				return debugOverlayWindow.Visible;
			}
			set {
				debugOverlayWindow.Visible = value;
			}
		}

		bool IsStatusWindowVisible {
			get {
				return debugStatusWindow.ParentWindow != null;
			}
			set {
				ShowStatusWindow (value);
			}
		}

		#endregion

		public DebugWindow (IntPtr handle) : base (handle)
		{
			if (debugOverlayWindow == null) {
				debugOverlayWindow = new BorderedWindow (CGRect.Empty, NSColor.Blue);
				AddChildWindow (debugOverlayWindow, NSWindowOrderingMode.Above);
			}
			if (debugNextOverlayWindow == null) {
				debugNextOverlayWindow = new BorderedWindow (CGRect.Empty, NSColor.Yellow);
				AddChildWindow (debugNextOverlayWindow, NSWindowOrderingMode.Above);
			}

			if (debugPreviousOverlayWindow == null) {
				debugPreviousOverlayWindow = new BorderedWindow (CGRect.Empty, NSColor.Red);
				AddChildWindow (debugPreviousOverlayWindow, NSWindowOrderingMode.Above);
			}

			if (debugStatusWindow == null) {
				debugStatusWindow = new StatusWindow (new CGRect (10, 10, 300, 500));
			}
		}

		void ShowStatusWindow (bool value)
		{
			if (value) {
				if (!IsStatusWindowVisible) {
					AddChildWindow (debugStatusWindow, NSWindowOrderingMode.Above);
					RefreshStatusWindow ();
				}
			}
			else {
				debugStatusWindow?.Close ();
			}
		}

		public void RefreshStatusWindow ()
		{
			debugStatusWindow.AlignWith (Frame);

			var anyFocusedView = view != null;
			if (!anyFocusedView)
				return;

			var elements = view.GenerateLog ("Current");
			if (nextKeyView != null) {
				elements.AddRange (nextKeyView.GenerateLog ("Next"));
			};
			if (previousKeyView != null) {
				elements.AddRange (previousKeyView.GenerateLog ("Previous"));
			};

			debugStatusWindow.GenerateStatusView (elements);
		}

		#region Public API

		public void SetMenu (NSMenu menu)
		{
			this.menu = menu ?? throw new NullReferenceException ("Menu cannot be null");
			int menuCount = 0;
			var submenu = this.menu.ItemAt (0).Submenu;
			submenu.AutoEnablesItems = false;
			submenu.InsertItem (new NSMenuItem (string.Format ("KeyViewLoop Debugger v{0}",GetAssemblyVersion ()), ShowHideDetailDebuggerWindow) { Enabled = false }, menuCount++);
			submenu.InsertItem (NSMenuItem.SeparatorItem, menuCount++);
			submenu.InsertItem (new NSMenuItem ("Show KeyViewLoop Debug Window", ShowHideDetailDebuggerWindow), menuCount++);
			submenu.InsertItem (new NSMenuItem ("Show First Responder Overlay", ShowFirstResponderOverlayHandler), menuCount++);
			submenu.InsertItem (new NSMenuItem ("Show Next Responder Overlay", ShowNextResponderOverlayHandler), menuCount++);
			submenu.InsertItem (new NSMenuItem ("Show Previous Responder Overlay", ShowPreviousResponderOverlayHandler), menuCount++);

			submenu.InsertItem (NSMenuItem.SeparatorItem, menuCount++);
		}

		#endregion

		void ShowFirstResponderOverlayHandler (object sender, EventArgs e)
		{
			IsFirstResponderOverlayVisible = !IsFirstResponderOverlayVisible;
			RefreshDebugData (FirstResponder);

			var menuItem = (NSMenuItem)sender;
			menuItem.Title = string.Format ("{0} First Responder Overlay", ToMenuAction (!IsFirstResponderOverlayVisible));
		}

		void ShowPreviousResponderOverlayHandler (object sender, EventArgs e)
		{
			IsPreviousResponderOverlayVisible = !IsPreviousResponderOverlayVisible;
			RefreshDebugData (FirstResponder);

			var menuItem = (NSMenuItem)sender;
			menuItem.Title = string.Format ("{0} Previous Responder Overlay", ToMenuAction (!IsPreviousResponderOverlayVisible));
		}

		void ShowNextResponderOverlayHandler (object sender, EventArgs e)
		{
			IsNextResponderOverlayVisible = !IsNextResponderOverlayVisible;
			RefreshDebugData (FirstResponder);

			var menuItem = (NSMenuItem)sender;
			menuItem.Title = string.Format ("{0} Next Responder Overlay", ToMenuAction (!IsNextResponderOverlayVisible));
		}

		void ShowHideDetailDebuggerWindow (object sender, EventArgs e)
		{
			IsStatusWindowVisible = !IsStatusWindowVisible;

			var menuItem = (NSMenuItem)sender;
			menuItem.Title = string.Format ("{0} KeyViewLoop Debug Window", ToMenuAction (!IsStatusWindowVisible));
		}

		string ToMenuAction (bool value)
		{
			return value ? "Show" : "Hide";
		}

		void RefreshDebugData (NSResponder firstResponder)
		{
			view = firstResponder as NSView;
			if (view != null) {
				debugOverlayWindow.AlignWith (view);
			}

			nextKeyView = view?.NextValidKeyView as NSView;
			if (nextKeyView != null) {
				debugNextOverlayWindow.AlignWith (nextKeyView);
			}

			previousKeyView = view?.PreviousValidKeyView as NSView;
			if (previousKeyView != null) {
				debugPreviousOverlayWindow.AlignWith (previousKeyView);
			}

			RefreshStatusWindow ();
		}

		public override void BecomeMainWindow ()
		{
			base.BecomeMainWindow ();
		}

		public override bool MakeFirstResponder (NSResponder aResponder)
		{
			RefreshDebugData (aResponder);
			return base.MakeFirstResponder (aResponder);
		}

		string GetAssemblyVersion ()
		{
			var assembly = System.Reflection.Assembly.GetExecutingAssembly ();
			var fileVersionInfo = System.Diagnostics.FileVersionInfo.GetVersionInfo (assembly.Location);
			return fileVersionInfo.ProductVersion;
		}
	}
}
